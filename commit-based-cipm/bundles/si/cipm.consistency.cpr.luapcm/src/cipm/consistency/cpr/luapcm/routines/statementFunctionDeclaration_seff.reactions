import org.xtext.lua.LuaUtil

import "http://www.xtext.org/lua/Lua" as lua
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: statementFunctionDeclaration_seff
in reaction to changes in lua
execute actions in pcm

routine newStatementFunctionDeclaration(lua::Statement_Function_Declaration functionDeclaration) {
	match {
		val rdseff = retrieve optional pcm::ResourceDemandingSEFF corresponding to functionDeclaration
		val operationSignature = retrieve pcm::OperationSignature corresponding to functionDeclaration
		val basicComponent = retrieve pcm::BasicComponent corresponding to LuaUtil.getComponent(functionDeclaration)
	}
	update {
		if (!rdseff.present) {
			createSeffForStatementFunctionDeclaration(functionDeclaration, operationSignature, basicComponent)
		} else {
			logger.info("Seff for function already present: " + functionDeclaration.name)
		}
	}
}

routine createSeffForStatementFunctionDeclaration(
	lua::Statement_Function_Declaration functionDeclaration,
	pcm::OperationSignature operationSignature,
	pcm::BasicComponent basicComponent
) {
	create {
		val rdseff = new pcm::ResourceDemandingSEFF
	}
	update {
		logger.info(functionDeclaration.name + ": Creating SEFF")
		// this signature must belong to the interface that is referenced by our provided role
		rdseff.describedService__SEFF = operationSignature
		rdseff.basicComponent_ServiceEffectSpecification = basicComponent

		// Reconstruct the step behaviour of the rdseff
//		SeffReconstructionForward.doReconstruction(correspondenceModel, functionDeclaration, rdseff)
		addCorrespondenceBetween(functionDeclaration, rdseff)
//		addCorrespondenceBetween(functionDeclaration.function.block, rdseff)
		basicComponent.serviceEffectSpecifications__BasicComponent += rdseff
		addCorrespondenceBetween(rdseff, basicComponent)
	}
}

routine removeSeffForStatementFunctionDeclaration(lua::Statement_Function_Declaration functionDeclaration) {
	match {
		val rdseff = retrieve pcm::ResourceDemandingSEFF corresponding to functionDeclaration
		val basicComponent = retrieve pcm::BasicComponent corresponding to rdseff
	}
	update {
		logger.info(functionDeclaration.name + ": Removing SEFF")
		basicComponent.serviceEffectSpecifications__BasicComponent -= rdseff

		removeCorrespondenceBetween(functionDeclaration, rdseff)
//		removeCorrespondenceBetween(functionDeclaration.function.block, rdseff)
		rdseff.removeObject
	}
}