
import "http://www.xtext.org/lua/Lua" as lua
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: namedChunk_providedRole
in reaction to changes in lua
execute actions in pcm

routine assertOperationProvidedRoleExistenceForNamedChunk(lua::NamedChunk namedChunk, lua::Chunk chunk) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to namedChunk
		val basicComponent = retrieve pcm::BasicComponent corresponding to chunk
		val provRoles = retrieve optional pcm::OperationProvidedRole corresponding to namedChunk
	}
	update {
		if (provRoles.empty) {
			createOperationProvidedRole(opInterface, basicComponent, namedChunk)
		}
	}
}

routine createOperationProvidedRole(
	pcm::OperationInterface opInterface, pcm::BasicComponent basicComponent, lua::NamedChunk namedChunk
) {
	create {
		val operationProvidedRole = new pcm::OperationProvidedRole
	}
	update {
		operationProvidedRole.providedInterface__OperationProvidedRole = opInterface
		operationProvidedRole.providingEntity_ProvidedRole = basicComponent
		operationProvidedRole.entityName = basicComponent.entityName + "_provides_" + opInterface.entityName
		
		basicComponent.providedRoles_InterfaceProvidingEntity += operationProvidedRole
		
		addCorrespondenceBetween(operationProvidedRole, namedChunk)
	}
}

routine checkRemovalOfOperationProvidedRole(lua::NamedChunk namedChunk) {
	match {
		val interfaze = retrieve pcm::OperationInterface corresponding to namedChunk
		val basicCom = retrieve pcm::BasicComponent corresponding to namedChunk
		val opRoles = retrieve many pcm::OperationProvidedRole corresponding to namedChunk
	}
	update {
		val role = opRoles.findFirst [
			it.providedInterface__OperationProvidedRole == interfaze && it.providingEntity_ProvidedRole == basicCom
		]
		if (role !== null) {
			removeOperationProvidedRole(role)
		}
	}
}

routine removeOperationProvidedRolesForRemovedClass(lua::NamedChunk namedChunk) {
	match {
		val opRoles = retrieve many pcm::OperationProvidedRole corresponding to namedChunk
	}
	update {
		for (role : opRoles) {
			removeOperationProvidedRole(role)
		}
	}
}

routine removeOperationProvidedRole(pcm::OperationProvidedRole role) {
	update {
		removeObject(role)
	}
}


// Add 'implements'.
//reaction AddedTypeReference {
//	after element java::TypeReference inserted in java::Class[implements]
//	with newValue instanceof NamespaceClassifierReference || newValue instanceof ClassifierReference
//	call {
//		createOrFindOperationProvidedRoleFromTypeReference(newValue)
//	}
//}

// Remove 'implements'.
//reaction RemovedTypeReference {
//	after element java::TypeReference removed from java::Class[implements]
//	with oldValue instanceof NamespaceClassifierReference || oldValue instanceof ClassifierReference
//	call {
//		checkRemovalOfOperationProvidedRole(affectedEObject, getNormalizedClassifierFromTypeReference(oldValue))
//	}
//}

//routine createOrFindOperationProvidedRoleFromTypeReference(java::TypeReference typeReference) {
//	update {
//		val javaClass = typeReference.eContainer as Class
//		var javaInterfaceClassifier = getNormalizedClassifierFromTypeReference(typeReference)
//		createOrFindOperationProvidedRole(javaInterfaceClassifier, javaClass)
//	}
//}