import org.xtext.lua.LuaUtil
import cipm.consistency.cpr.luapcm.seffreconstruction.ComponentSetInfoRegistry

import "http://www.xtext.org/lua/Lua" as lua
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm

reactions: statementFunctionDeclaration_operationSignature
in reaction to changes in lua
execute actions in pcm

routine createOperationSignatureForStatementFunctionDeclaration(lua::Statement_Function_Declaration functionDeclaration) {
	match {
		val operationInterface = retrieve pcm::OperationInterface corresponding to LuaUtil.getComponent(
			functionDeclaration)
		require absence of pcm::OperationSignature corresponding to functionDeclaration
	}
	create {
		val operationSignature = new pcm::OperationSignature
	}
	update {
		logger.info(functionDeclaration.name + ": Creating signature")

		operationSignature.entityName = functionDeclaration.name + "_signature"
		operationSignature.interface__OperationSignature = operationInterface
		operationInterface.signatures__OperationInterface += operationSignature

		// TODO remove 
//		println("adding signature " + operationSignature.entityName)
		// some external call actions may be created before this signature is created, so we fix the ExternalCallAction
		// set signature in external call actions which are calling this declaration
		ComponentSetInfoRegistry.getInfosForComponentSet(functionDeclaration).declarationToCallingActions.get(
			functionDeclaration).forEach [
			logger.debug("Found a calling external call the created signature. Registerring it.")
			it.calledService_ExternalService = operationSignature
		]

		addCorrespondenceBetween(functionDeclaration, operationSignature)
	}
}

routine removeOperationSignatureForStatementFunctionDeclaration(lua::Statement_Function_Declaration functionDeclaration) {
	match {
		val operationSignature = retrieve pcm::OperationSignature corresponding to functionDeclaration
	}
	update {
		logger.info(functionDeclaration.name + ": Removing signature")
		if (functionDeclaration.function !== null) {
			for (param : functionDeclaration.function.arguments) {
				// TODO i cannot import this, as it is already imported elsewhere :-(
//					deleteParameter(param)
			}
		}
		// TODO
		// Should the corresponding SEFFs still exist?
		// Should the references to the removed OperationSignature in all
		// rdseff.describedService__SEFF also be removed?
		removeCorrespondenceBetween(operationSignature, functionDeclaration)
		removeObject(operationSignature)
	}
}