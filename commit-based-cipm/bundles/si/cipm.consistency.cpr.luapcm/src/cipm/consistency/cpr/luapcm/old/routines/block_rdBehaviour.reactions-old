import cipm.consistency.cpr.luapcm.seffreconstruction.ActionReconstruction
import cipm.consistency.cpr.luapcm.seffreconstruction.ActionUtil
import org.eclipse.xtext.EcoreUtil2
import org.xtext.lua.LuaUtil
import org.xtext.lua.lua.Statement
import org.xtext.lua.lua.Statement_Function_Declaration

import "http://www.xtext.org/lua/Lua" as lua
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: block_rdBehaviour
in reaction to changes in lua
execute actions in pcm

import block_rdBehaviour_internal

routine addedBlock(lua::Block block) {
	match {
		val rdBehaviour = retrieve optional pcm::ResourceDemandingBehaviour corresponding to block
		val basicComponent = retrieve optional pcm::BasicComponent corresponding to LuaUtil.getComponent(block)
		val operationSignature = retrieve optional pcm::OperationSignature corresponding to LuaUtil.
			getDeclaration(block)
		val parentAction = retrieve optional pcm::AbstractAction corresponding to EcoreUtil2.
			getContainerOfType(block, Statement)
	}
	update {
		if (!ActionReconstruction.needsActionReconstruction(block)) {
			// no seff reconstruction needed
			return
		}

		if (rdBehaviour.present) {
			logger.debug(ActionUtil.getBlockName(block) + ": RD behaviour already exists for block")
			return
		}

		val parentStatement = EcoreUtil2.getContainerOfType(block, Statement)
		logger.debug(String.format("%s (%s): Needs SEFF reconstruction", block, parentStatement.class.name))

		if (parentStatement instanceof Statement_Function_Declaration) {
			if (!basicComponent.present) {
				logger.warn("Component of Block has no corresponding basic component")
				return
			}
			if (!operationSignature.present) {
				logger.warn("Declaration of Block has no corresponding operation signature")
				return
			}

			// create the RDSEFF for the block
			createRDSeff(block, parentStatement, basicComponent.get, operationSignature.get)

		} else {
			if (!parentAction.present) {
				logger.warn("Inner block has no parent action")
				return
			}

			// create the RDBehaviour for the block
			createRDBehaviour(block, parentAction.get)
		}
	}
}

routine removedSeffBlock(lua::Block block) {
	match {
		val rdBehaviour = retrieve pcm::ResourceDemandingBehaviour corresponding to block
	}
	update {
		logger.debug(block.toString + ": Block deleted -> Removing RD Behaviour")
		removeCorrespondenceBetween(rdBehaviour, block)
		rdBehaviour.removeObject
	}
}