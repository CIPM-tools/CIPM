import org.emftext.language.java.classifiers.Class
import org.emftext.language.java.types.ClassifierReference
import org.emftext.language.java.types.NamespaceClassifierReference
import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.*

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: commonOperationProvidedRole
in reaction to changes in java
execute actions in pcm


// Add 'implements'.
reaction AddedTypeReference {
	after element java::TypeReference inserted in java::Class[implements]
		with newValue instanceof NamespaceClassifierReference || newValue instanceof ClassifierReference
	call {
		createOrFindOperationProvidedRoleFromTypeReference(newValue)
	}
}

// Remove 'implements'.
reaction RemovedTypeReference {
	after element java::TypeReference removed from java::Class[implements]
		with oldValue instanceof NamespaceClassifierReference || oldValue instanceof ClassifierReference
	call {
		checkRemovalOfOperationProvidedRole(affectedEObject, getNormalizedClassifierFromTypeReference(oldValue))
	}
}

routine createOrFindOperationProvidedRoleFromTypeReference(java::TypeReference typeReference) {
	update {
		val javaClass = typeReference.eContainer as Class
		var javaInterfaceClassifier = getNormalizedClassifierFromTypeReference(typeReference)
		createOrFindOperationProvidedRole(javaInterfaceClassifier, javaClass)
	}
}

routine createOrFindOperationProvidedRole(java::Classifier classifierInterface, java::Class javaClass) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to classifierInterface
		val basicComponent = retrieve pcm::BasicComponent corresponding to javaClass
		val provRoles = retrieve many pcm::OperationProvidedRole corresponding to javaClass
	}
	update {
		val role = provRoles.findFirst[it.providedInterface__OperationProvidedRole === opInterface
			&& it.providingEntity_ProvidedRole === basicComponent]
		if (role === null || javaClass.annotationInstances.findFirst[it.annotation.name.equals("FeignClient")] === null) {
			createOperationProvidedRole(opInterface, basicComponent, javaClass)
		}
	}
}

routine createOperationProvidedRole(pcm::OperationInterface opInterface,
	pcm::BasicComponent basicComponent, java::Class javaClass) {
	create {
		val operationProvidedRole = new pcm::OperationProvidedRole
	}
	update {
		operationProvidedRole.providedInterface__OperationProvidedRole = opInterface
		operationProvidedRole.providingEntity_ProvidedRole = basicComponent
		operationProvidedRole.entityName = basicComponent.entityName + "_provides_" + opInterface.entityName
		addCorrespondenceBetween(operationProvidedRole, javaClass) 
	}
}

routine checkRemovalOfOperationProvidedRole(java::Class clazz, java::Classifier classifierRef) {
	match {
		val interfaze = retrieve pcm::OperationInterface corresponding to classifierRef
		val basicCom = retrieve pcm::BasicComponent corresponding to clazz
		val opRoles = retrieve many pcm::OperationProvidedRole corresponding to clazz
	}
	update {
		val role = opRoles.findFirst[it.providedInterface__OperationProvidedRole == interfaze
			&& it.providingEntity_ProvidedRole == basicCom]
		if (role !== null) {
			removeOperationProvidedRole(role)
		}
	}
}

routine removeOperationProvidedRolesForRemovedClass(java::Classifier classifier) {
	match {
		val opRoles = retrieve many pcm::OperationProvidedRole corresponding to classifier
	}
	update {
		for (role : opRoles) {
			removeOperationProvidedRole(role)
		}
	}
}

routine removeOperationProvidedRole(pcm::OperationProvidedRole role) {
	update {
		removeObject(role)
	}
}
