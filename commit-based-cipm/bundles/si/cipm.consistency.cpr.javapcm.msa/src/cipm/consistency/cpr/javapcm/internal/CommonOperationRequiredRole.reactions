import static tools.vitruv.applications.util.temporary.java.JavaTypeUtil.*
import static cipm.consistency.cpr.util.InternalUtils.findRequiredRole
import org.palladiosimulator.pcm.repository.OperationRequiredRole
import org.palladiosimulator.pcm.repository.RepositoryPackage

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm


reactions: commonOperationRequiredRole
in reaction to changes in java
execute actions in pcm


reaction AddedImport {
	after element java::Import inserted in java::JavaRoot[imports]
	call {
		checkImportForImportedRequiredRoles(newValue)
	}
}

routine checkImportForImportedRequiredRoles(java::Import importSt) {
	update {
		for (classifier : importSt.containingCompilationUnit.classifiers) {
			createOrFindRequiredRoleForImport(importSt, classifier)
		}
	}
}

routine checkClassifierForImportedRequiredRoles(java::ConcreteClassifier classifier) {
	update {
		for (importSt : classifier.containingCompilationUnit.imports) {
			createOrFindRequiredRoleForImport(importSt, classifier)
		}
	}
}

routine createOrFindRequiredRoleForImport(java::Import importSt, java::ConcreteClassifier importingClassifier) {
	match {
		val opInterface = retrieve pcm::OperationInterface corresponding to importSt.classifier
		val opInterfaceCom = retrieve optional pcm::RepositoryComponent corresponding to importSt.classifier
		val containingCom = retrieve pcm::RepositoryComponent corresponding to importingClassifier
	}
	update {
		if (opInterfaceCom.empty
			|| opInterfaceCom.get !== containingCom
			|| importSt.classifier.annotationInstances.findFirst[it.annotation.name.equals("FeignClient")] !== null
		) {
			var reqRole = findRequiredRole(containingCom, opInterface)
			if (reqRole !== null) {
				addCorrespondenceForImportAndRequiredRole(importSt, reqRole)
				return;
			}
			createRequiredRoleForImport(importSt, opInterface, containingCom)
		}
	}
}

routine createRequiredRoleForImport(java::Import importSt, pcm::OperationInterface opInterface,
		pcm::RepositoryComponent requiringCom) {
	match {
		require absence of pcm::OperationRequiredRole corresponding to importSt
	}
	create {
		val reqRole = new pcm::OperationRequiredRole
	}
	update {
		reqRole.requiredInterface__OperationRequiredRole = opInterface
		reqRole.requiringEntity_RequiredRole = requiringCom
		reqRole.entityName = "Component_" + requiringCom.entityName + "_requires_"
			+ opInterface.entityName
		addCorrespondenceForImportAndRequiredRole(importSt, reqRole)
	}
}

routine addCorrespondenceForImportAndRequiredRole(java::Import importSt, pcm::OperationRequiredRole reqRole) {
	update {
		addCorrespondenceBetween(importSt, reqRole)
	}
}

routine checkFieldForRequiredInterface(java::Classifier classifier, java::Field javaField) {
	match {
		val correspondingInterface = retrieve pcm::OperationInterface corresponding to classifier
		val correspondingComponent = retrieve pcm::RepositoryComponent corresponding to classifier
		val repositoryComponent = retrieve pcm::RepositoryComponent 
			corresponding to javaField.containingConcreteClassifier
	}
	update {
		if (correspondingComponent != repositoryComponent) {
			var reqRole = findRequiredRole(repositoryComponent, correspondingInterface)
			if (reqRole !== null) {
				addCorrespondenceForFieldAndRequiredRole(javaField, reqRole)
			} else {
				createOperationRequiredRoleForField(javaField, correspondingInterface,
					repositoryComponent)
			}
		}
	}
}

routine createOperationRequiredRoleForField(java::Field javaField,
	pcm::OperationInterface operationInterface, pcm::RepositoryComponent repoComponent) {
	create {
		val operationRequiredRole = new pcm::OperationRequiredRole
	}
	update {
		operationRequiredRole.requiredInterface__OperationRequiredRole = operationInterface
		operationRequiredRole.requiringEntity_RequiredRole = repoComponent
		operationRequiredRole.entityName = "Component_" + repoComponent.entityName + "_requires_" +
			operationInterface.entityName
		addCorrespondenceForFieldAndRequiredRole(javaField, operationRequiredRole)
	}
}

routine addCorrespondenceForFieldAndRequiredRole(java::Field javaField, pcm::OperationRequiredRole reqRole) {
	update {
		addCorrespondenceBetween(reqRole, javaField)
	}
}

reaction RemovedImport {
	after element java::Import removed from java::JavaRoot[imports]
	call {
		removeRequiredRoleForJavaElement(oldValue)
	}
}

routine removeRequiredRoleForJavaElement(java::Commentable javaElement) {
	match {
		val reqRole = retrieve pcm::OperationRequiredRole corresponding to javaElement
		val allImports = retrieve many java::Commentable corresponding to reqRole
	}
	update {
		if (allImports.size === 1) {
			removeRequiredRole(reqRole)
		} else {
			removeCorrespondenceForJavaElementAndRequiredRole(javaElement, reqRole)
		}
	}
}

routine checkUpdatedFieldType(java::Field field, java::TypeReference oldType, java::TypeReference newType) {
	match {
		val oldCorrespondingOpInterface = retrieve optional pcm::OperationInterface
			corresponding to getNormalizedClassifierFromTypeReference(oldType)
		val oldCorrespondingCom = retrieve optional pcm::RepositoryComponent
			corresponding to getNormalizedClassifierFromTypeReference(oldType)
		val opInterface = retrieve optional pcm::OperationInterface
			corresponding to getNormalizedClassifierFromTypeReference(newType)
		val newCom = retrieve optional pcm::RepositoryComponent
			corresponding to getNormalizedClassifierFromTypeReference(newType)
		val opRequiredRole = retrieve optional pcm::OperationRequiredRole corresponding to field
		val basicComponent = retrieve pcm::BasicComponent corresponding to field.containingConcreteClassifier
	}
	update {
		if (opRequiredRole.present
				&& oldCorrespondingOpInterface.present && opInterface.present
				&& oldCorrespondingCom.present && newCom.present
				&& newCom.get !== basicComponent) {
			// Reset required role.
			removeRequiredRoleForJavaElement(field)
			checkFieldForRequiredInterface(field.containingConcreteClassifier, field)
			return
		}
		if (!oldCorrespondingOpInterface.present && opInterface.present
				&& newCom.present && newCom.get !== basicComponent) {
			// New required role needs to be added.
			checkFieldForRequiredInterface(field.containingConcreteClassifier, field)
			return
		}
		if (opRequiredRole.present
				&& (oldCorrespondingOpInterface.present && !opInterface.present
				|| oldCorrespondingOpInterface.present && opInterface.present
				&& oldCorrespondingCom.present && newCom.present
				&& newCom.get === basicComponent)) {
			// Remove required role and correspondence.
			removeRequiredRoleForJavaElement(field)
		}
	}
}

routine removeOperationRequiredRolesForRemovedClass(java::Classifier classifier) {
	match {
		val pcmInterface = retrieve pcm::Interface corresponding to classifier
		val pcmRepository = retrieve pcm::Repository corresponding to RepositoryPackage.Literals.REPOSITORY
	}
	update {
		pcmRepository.components__Repository.forEach[
			it.requiredRoles_InterfaceRequiringEntity
				.filter(OperationRequiredRole)
				.filter[it.requiredInterface__OperationRequiredRole === pcmInterface]
				.toSet
				.forEach[removeRequiredRole(it)]
		]
	}
}

routine removeRequiredRole(pcm::OperationRequiredRole reqRole) {
	update {
		removeObject(reqRole)
	}
}

routine removeCorrespondenceForJavaElementAndRequiredRole(java::Commentable javaElement, pcm::OperationRequiredRole reqRole) {
	update {
		removeCorrespondenceBetween(javaElement, reqRole)
	}
}
